*nvim-claude.txt*    Claude AI integration for Neovim

CONTENTS                                                    *nvim-claude-contents*

1. Introduction ........................... |nvim-claude-introduction|
2. Requirements ........................... |nvim-claude-requirements|
3. Installation ........................... |nvim-claude-installation|
4. Configuration .......................... |nvim-claude-configuration|
5. Commands ............................... |nvim-claude-commands|
6. Mappings ............................... |nvim-claude-mappings|
7. Usage .................................. |nvim-claude-usage|
8. Troubleshooting ........................ |nvim-claude-troubleshooting|

==============================================================================
1. INTRODUCTION                                        *nvim-claude-introduction*

nvim-claude is a Neovim plugin that provides seamless integration with Claude AI,
featuring tmux-based chat workflow, inline diff reviews, and background agent
management.

Features:
- Tmux Integration: Chat with Claude in a dedicated tmux pane
- Inline Diff Review: Review and accept/reject Claude's code changes
- Background Agents: Create isolated worktrees for complex tasks
- Git Integration: Automatic stash creation and diff tracking
- Smart Selection: Send buffer content, visual selections, or git hunks
- Persistent State: Diff state persists across Neovim sessions

==============================================================================
2. REQUIREMENTS                                        *nvim-claude-requirements*

- Neovim >= 0.9.0
- Tmux (for chat interface)
- Git (for diff management)
- Claude AI CLI tool
- Optional: diffview.nvim for enhanced diff viewing

==============================================================================
3. INSTALLATION                                        *nvim-claude-installation*

Using lazy.nvim: >lua
  {
    'zolinthecow/nvim-claude',
    config = function()
      require('nvim-claude').setup({
        -- your configuration
      })
    end,
    dependencies = {
      'nvim-telescope/telescope.nvim',
      'tpope/vim-fugitive',
      'sindrets/diffview.nvim',  -- Optional
    },
  }
<

==============================================================================
4. CONFIGURATION                                      *nvim-claude-configuration*

Default configuration: >lua
  {
    tmux = {
      split_direction = 'h',      -- 'h' or 'v'
      split_size = 40,            -- Percentage
      session_prefix = 'claude-',
      pane_title = 'claude-chat',
    },
    agents = {
      work_dir = '.agent-work',
      use_worktrees = true,
      auto_gitignore = true,
      max_agents = 5,
      cleanup_days = 7,
    },
    ui = {
      float_diff = true,
      telescope_preview = true,
      status_line = true,
    },
    mappings = {
      prefix = '<leader>c',
      quick_prefix = '<C-c>',
    },
  }
<

==============================================================================
5. COMMANDS                                                *nvim-claude-commands*

Basic Commands:
                                                                        *:Claude*
:Claude                 Open Claude chat in tmux pane

                                                                  *:ClaudeBuffer*
:ClaudeBuffer           Send current buffer to Claude

                                                               *:ClaudeSelection*
:ClaudeSelection        Send visual selection to Claude

                                                                    *:ClaudeHunk*
:ClaudeHunk             Send git hunk at cursor to Claude

Agent Commands:
                                                                   *:ClaudeAgent*
:ClaudeAgent {task}     Create new background agent with specified task

                                                                  *:ClaudeAgents*
:ClaudeAgents           List and manage all agents

                                                               *:ClaudeKillAgent*
:ClaudeKillAgent [id]   Kill specific agent (prompts if no id)

                                                                 *:ClaudeKillAll*
:ClaudeKillAll          Kill all active agents

                                                             *:ClaudeSwitchAgent*
:ClaudeSwitchAgent [id] Switch to agent's worktree

                                                               *:ClaudeDiffAgent*
:ClaudeDiffAgent [id]   Review agent's changes with diffview

Diff Management:
                                                               *:ClaudeAcceptAll*
:ClaudeAcceptAll        Accept all Claude's changes across all files

                                                            *:ClaudeResetBaseline*
:ClaudeResetBaseline    Reset diff baseline for cumulative diffs

                                                       *:ClaudeCleanStaleTracking*
:ClaudeCleanStaleTracking Clean up stale file tracking

Utility Commands:
                                                            *:ClaudeInstallHooks*
:ClaudeInstallHooks     Install Claude Code hooks for this project

                                                          *:ClaudeUninstallHooks*
:ClaudeUninstallHooks   Remove Claude Code hooks

                                                          *:ClaudeDebugInlineDiff*
:ClaudeDebugInlineDiff  Debug inline diff state

                                                           *:ClaudeDebugTracking*
:ClaudeDebugTracking    Debug file tracking state

==============================================================================
6. MAPPINGS                                                *nvim-claude-mappings*

Default mappings (with prefix <leader>c):

Chat Commands:
<leader>cc              Open Claude chat
<leader>cb              Send buffer to Claude
<leader>cv              Send visual selection to Claude
<leader>ch              Send git hunk to Claude

Inline Diff Review (prefix <leader>i):
<leader>ia              Accept current hunk
<leader>ir              Reject current hunk
<leader>in              Next hunk
<leader>ip              Previous hunk
<leader>ii              Accept all hunks in file
<leader>io              Reject all hunks in file

File Navigation (prefix <leader>c):
<leader>ci              Next file with diffs
<leader>co              Previous file with diffs
<leader>ca              Accept all diffs across all files

Agent Management:
<leader>cA              Create new agent
<leader>cas             Show/switch agents
<leader>cak             Kill agent
<leader>caw             Switch to agent worktree
<leader>cad             Review agent changes

==============================================================================
7. USAGE                                                      *nvim-claude-usage*

Basic Chat Workflow:
1. Open Claude chat with <leader>cc
2. Type your question or request
3. Claude's responses appear in the tmux pane

Code Review Workflow:
1. Make a request to Claude that involves code changes
2. When Claude edits files, inline diffs appear automatically
3. Navigate hunks with <leader>in / <leader>ip
4. Accept with <leader>ia or reject with <leader>ir
5. Accept all changes in a file with <leader>ii

Background Agent Workflow:
1. Create an agent: :ClaudeAgent implement new feature X
2. The agent works in an isolated git worktree
3. Check progress: <leader>cas to see all agents
4. Review changes: <leader>cad to see agent's diff
5. Switch to worktree: <leader>caw to work directly
6. Kill when done: <leader>cak

==============================================================================
8. TROUBLESHOOTING                                  *nvim-claude-troubleshooting*

Tmux Issues:
- Ensure tmux is installed and you're running Neovim inside a tmux session
- Check tmux version compatibility (>= 2.0 recommended)

Diff Not Showing:
- Check :ClaudeDebugInlineDiff for state information
- Ensure git is available and you're in a git repository
- Try :ClaudeResetBaseline to reset the diff system

Agent Issues:
- Check available disk space for worktrees
- Ensure git worktree support (git >= 2.5)
- Review agent logs in the tmux window

vim:tw=78:ts=8:ft=help:norl:
